% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compose.R
\name{compose}
\alias{compose}
\title{Derive a posterior through composition of a model & data}
\usage{
compose(
  data,
  code_path,
  out_path,
  num_chains = NULL,
  chain_num_start = 1,
  exe_args_list = NULL
)
}
\arguments{
\item{data}{list() (or \code{tibble::lst()}) object containing the data.}

\item{code_path}{Character string describing the path to the Stan code.}

\item{out_path}{Character string describing the path to a file where the final sampling output should be saved (in .qs format)}

\item{num_chains}{Integer value indicating the number of chains. If NULL (the default), \code{\link{parallel::detectCores()}/2} will be used. If negative, \code{\link{parallel::detectCores()}/2-num_cores} will be used. Otherwise, \code{num_cores} will be used.}

\item{chain_num_start}{Integer value (default: 1) indicating An offset for the numeric chain identifiers. Useful if you have already run a set of chains, collected the results, and want to run more chains.}

\item{exe_args_list}{list() object with a named hierarchical structure matching what exe expects in terms of runtime arguments (viewable via \code{\link{aria::exe_args}}). If NULL (the default), aria will select some defaults.}
}
\value{
NULL (invisibly); Side effects: \code{num_chains} sampling processes are launched in the background with progress monitored by an RStudio Job.
}
\description{
Derive a posterior through composition of a model & data
}
\examples{
\dontrun{
#example for setting seed argument
compose(
    data = my_data
    , model = 'my_model.stan'
    , exe_args_list = list(
        random = list(
            seed = 123
        )
    )
)
}

}
